use paradox::{Date, FixedPoint, ParadoxParse};
use std::collections::HashMap;

#[derive(ParadoxParse, Default)]
pub struct Gamestate {
    // XXX: 0x2f3f slots in here. Unknown member.
    #[id(0x2c9b)] pub gameplaysettings: (),
    #[id(0x006e)] pub speed: i32,
    #[id(0x2dc6)] pub multiplayer_random_seed: u32,
    #[id(0x2dc7)] pub multiplayer_random_count: i32,
    #[id(0x3564)] pub current_age: String, // XXX
    #[id(0x362c)] pub next_age_progress: FixedPoint,
    #[id(0x36d8)] pub id_counters: Vec<u32>,
    #[id(0x28a6)] pub unit: i32,
    #[id(0x30f6)] pub unit_template_id: i32,
    #[id(0x29cc)] pub flags: HashMap<String, Date>,
    #[id(0x28e4)] pub start_date: (), // XXX: Date
    #[id(0x36f1)] pub map_area_data: HashMap<String, ()>,
    #[id(0x3426)] pub total_military_power: f64,
    #[id(0x3427)] pub average_military_power: f64,
    #[id(0x3472)] pub institution_origin: Vec<i32>, // XXX: ProvinceRef
    #[id(0x2ff4)] pub national_focus: String,
    #[id(0x3447)] pub institutions: Vec<i32>,
    #[id(0x347f)] pub institutions_penalties: Vec<FixedPoint>,
    #[id(0x2871)] pub trade: Trade,
    #[id(0x2ecf)] pub production_leader_tag: Vec<String>, // XXX: CountryRef
    #[id(0x2e6c)] pub tradegoods_total_produced: Vec<FixedPoint>,
    #[id(0x3096)] pub change_price: HashMap<String, ()>,
    // id
    #[id(0x2bb4)] pub dynasty: (),
    #[id(0x2cc7)] #[repeated] pub rebel_faction: Vec<()>,
    #[id(0x343a)] pub great_powers: (),
    #[id(0x2d32)] pub empire: (),
    #[id(0x35b7)] pub celestial_empire: (),
    #[id(0x308d)] pub hre_leagues_status: i32,
    #[id(0x308e)] pub hre_religion_status: i32,
    #[id(0x331c)] #[repeated] pub trade_league: Vec<()>,
    #[id(0x2e4d)] pub religions: HashMap<String, ()>,
    #[id(0x3729)] pub religion_instance_data: HashMap<String, ()>,
    #[id(0x2afe)] pub fired_events: (),
    #[id(0x2e63)] pub pending_events: (),
    #[id(0x2833)] pub provinces: HashMap<String, ()>,
    #[id(0x2e4e)] pub countries: HashMap<String, Country>,
    #[id(0x28da)] pub active_advisors: HashMap<String, ()>,
    #[id(0x28ec)] pub diplomacy: (),
    #[id(0x291a)] pub combat: (),
    #[id(0x28f7)] #[repeated] pub active_war: Vec<()>,
    #[id(0x28f8)] #[repeated] pub previous_war: Vec<()>,
    #[id(0x0137)] pub income_statistics: Statistics,
    #[id(0x0138)] pub nation_size_statistics: Statistics,
    #[id(0x2b2a)] pub score_statistics: Statistics,
    #[id(0x0139)] pub inflation_statistics: Statistics,
    #[id(0x327c)] pub expanded_dip_action_groups: Vec<i32>,
    #[id(0x3328)] pub achievement_ok: bool,
    //2a8d, 3741, 374e
    #[id(0x37e3)] pub tech_level_dates: (), // it's a [(String, Date); 3]
    #[id(0x37f7)] pub idea_dates: HashMap<String, Date>,
    #[id(0x0179)] pub checksum: String,
}

#[derive(ParadoxParse, Default)]
pub struct Trade {
    #[id(0x015e)] #[repeated] pub node: Vec<TradeNode>,
}

#[derive(ParadoxParse, Default)]
pub struct TradeNode {
    #[id(0x2835)] pub definitions: String,
    #[id(0x2cad)] #[optional] pub current: FixedPoint,
    #[id(0x2da5)] #[optional] pub local_value: FixedPoint,
    #[id(0x2aa8)] #[optional] pub outgoing: FixedPoint,
    #[id(0x2b20)] #[optional] pub value_added_outgoing: FixedPoint,
    #[id(0x2da6)] pub retention: FixedPoint,
    #[id(0x2da7)] #[repeated] pub steer_power: Vec<FixedPoint>,
    #[id(0x37b0)] pub num_collectors: i32,
    #[id(0x2a15)] #[optional] pub total: FixedPoint,
    #[id(0x30e6)] #[optional] pub p_pow: FixedPoint,
    #[id(0x02a4)] #[optional] pub max: FixedPoint,
    #[id(0x2afb)] #[optional] pub collector_power: FixedPoint,
    #[id(0x2da8)] #[optional] pub pull_power: FixedPoint,
    #[id(0x2da9)] #[optional] pub retain_power: FixedPoint,
    #[id(0x2daa)] #[optional] pub highest_power: FixedPoint,
    #[id(0x372d)] #[optional] pub _wtf_is_this_broken_thing: FixedPoint,
    #[id(0x2aa7)] #[repeated] pub incoming: Vec<()>,
    #[id(0x2b06)] pub trade_goods_size: Vec<FixedPoint>,
    #[id(0x2b3c)] #[optional] pub top_provinces: Vec<String>,
    #[id(0x2b3d)] #[optional] pub top_provinces_values: Vec<FixedPoint>,
    #[id(0x2b3e)] #[optional] pub top_power: Vec<String>,
    #[id(0x2b3f)] #[optional] pub top_power_values: Vec<String>,
    #[id(0x2f92)] #[optional] pub trade_company_region: bool,
    #[id(0x3925)] pub most_recent_treasure_ship_passage: (), // XXX: Date
    #[collect] pub country_info: HashMap<String, CountryTradeNode>,
}

#[derive(ParadoxParse, Default)]
pub struct CountryTradeNode {
    #[id(0x00e1)] #[optional] pub r#type: i32,
    #[id(0x30e2)] #[optional] pub val: FixedPoint,
    #[id(0x2cb8)] #[optional] pub potential: FixedPoint,
    #[id(0x2d99)] #[optional] pub prev: FixedPoint,
    #[id(0x30e1)] #[optional] pub max_pow: FixedPoint,
    #[id(0x2846)] #[optional] pub max_demand: FixedPoint,
    #[id(0x2dac)] #[optional] pub province_power: FixedPoint,
    #[id(0x2b0b)] #[optional] pub ship_power: FixedPoint,
    #[id(0x2dad)] #[optional] pub power_fraction: FixedPoint,
    #[id(0x2daf)] #[optional] pub money: FixedPoint,
    #[id(0x2a15)] #[optional] pub total: FixedPoint,
    #[id(0x2da7)] #[optional] pub steer_power: i32,
    #[id(0x30e5)] #[optional] pub add: FixedPoint,
    #[id(0x2f70)] #[optional] pub already_sent: FixedPoint,
    #[id(0x3731)] #[optional] pub _something_something: FixedPoint,
    #[id(0x3732)] #[optional] pub _something_something2: FixedPoint,
    #[id(0x2c09)] #[optional] pub has_trader: bool,
    #[id(0x2c94)] #[optional] pub has_capital: bool,
    #[id(0x2785)] #[optional] pub light_ship: i32,
    #[id(0x30df)] #[optional] pub t_in: FixedPoint,
    #[id(0x30e4)] #[optional] pub t_from: HashMap<String, FixedPoint>,
    #[id(0x30e0)] #[optional] pub t_out: FixedPoint,
    #[id(0x30e3)] #[optional] pub t_to: HashMap<String, FixedPoint>,
    #[id(0x3747)] #[optional] pub _trading_strategy: String,
    #[id(0x3748)] #[optional] pub _trading_strategy_date: (), // XXX: Date
    #[id(0x2968)] #[optional] pub modifier: (),
}

#[derive(ParadoxParse, Default)]
pub struct Country {
    #[id(0x31ee)] #[optional] pub has_set_government_name: bool,
    #[id(0x319a)] pub government_rank: i32,
    #[id(0x373c)] #[optional] pub government_name: String,
    #[id(0x3019)] pub subject_focus: i32,
    #[id(0x2dbb)] pub trade_mission: FixedPoint,
    #[id(0x33eb)] pub blockade_mission: FixedPoint,
    #[id(0x294f)] pub continent: Vec<i32>,
    #[id(0x3447)] pub institutions: Vec<i32>,
    #[id(0x2a42)] #[optional] pub technology_cost: FixedPoint,
    // 3565? 3569 -> age bonus stuff, I think
    #[id(0x2d51)] #[optional] pub last_focus_move: (), // Date
    #[id(0x330a)] #[optional] pub last_sent_alliance_offer: (), // Date
    #[id(0x2838)] #[optional] pub history: (),
    #[id(0x29cc)] #[optional] pub flags: HashMap<String, Date>,
    #[id(0x2a8b)] #[optional] pub hidden_flags: HashMap<String, Date>,
    #[id(0x2a4d)] #[optional] pub variables: HashMap<String, FixedPoint>,
    #[id(0x284e)] pub capital: i32, // XXX: ProvinceRef
    #[id(0x2f97)] #[optional] pub fixed_capital: i32, // XXX: ProvinceRef
    #[id(0x2fdb)] #[optional] pub original_capital: i32, // XXX: ProvinceRef
    #[id(0x2f73)] pub trade_port: i32, // XXX: ProvinceRef
    #[id(0x2839)] #[optional] pub base_tax: FixedPoint,
    #[id(0x31bb)] #[optional] pub development: FixedPoint,
    #[id(0x31ef)] #[optional] pub raw_development: FixedPoint,
    #[id(0x31fd)] pub capped_development: FixedPoint,
    #[id(0x3444)] pub realm_development: FixedPoint,
    #[id(0x30c8)] #[optional] pub in_debt: bool,
    #[id(0x35d6)] pub isolationism: i32,
    #[id(0x2f59)] pub initialized_rivals: bool,
    #[id(0x3190)] pub recalculate_strategy: bool,
    #[id(0x0245)] pub colors: (),
    #[id(0x001b)] #[optional] pub name: String,
    #[id(0x2f26)] #[optional] pub adjective: String,
    #[id(0x2f2c)] pub dirty_colony: bool,
    #[id(0x283b)] #[optional] pub primary_culture: String,
    #[id(0x2b6c)] #[optional] pub dominant_culture: String,
    #[id(0x283c)] #[repeated] pub accepted_culture: Vec<String>,
    #[id(0x283e)] #[optional] pub religion: String,
    #[id(0x371d)] #[optional] pub religious_school: String,
    #[id(0x2b6d)] #[optional] pub dominant_religion: String,
    #[id(0x2863)] #[optional] pub technology_group: String,
    #[id(0x2b80)] #[optional] pub western: String,
    #[id(0x2862)] pub technology: (),
    #[id(0x32d6)] #[repeated] pub estate: Vec<()>,
    #[id(0x2cf7)] #[repeated] pub rival: Vec<()>,
    #[id(0x31b9)] pub highest_possible_fort: i32,
    #[id(0x330b)] pub highest_possible_fort_building: String,
    #[id(0x3081)] pub transfer_home_bonus: FixedPoint,
    #[id(0x2aea)] #[repeated] pub enemy: Vec<String>,
    #[id(0x2cb6)] #[optional] pub overlord: String,
    #[id(0x31fb)] #[repeated] pub gave_access: Vec<String>,
    #[id(0x33f5)] #[repeated] pub our_spy_network: Vec<String>,
    #[id(0x352c)] #[repeated] pub their_spy_network: Vec<String>,
    #[id(0x2f0c)] #[optional] pub federation_leader: String,
    #[id(0x2f0d)] #[repeated] pub federation_friends: Vec<String>,
    #[id(0x30c1)] #[optional] pub new_monarch: bool,
    #[id(0x2b53)] #[optional] pub is_at_war: bool,
    #[id(0x2fde)] #[repeated] pub effective_score_impact: Vec<()>,
    #[id(0x2d09)] #[optional] pub last_election: (), // Date
    #[id(0x2ed5)] #[optional] pub delayed_treasure: FixedPoint,
    #[id(0x2fb0)] #[optional] pub current_power_project: FixedPoint,
    #[id(0x2fb1)] #[repeated] pub power_projection: Vec<()>,
    #[id(0x2fc8)] pub navy_strength: f64,
    #[id(0x2e86)] #[optional] pub total_war_worth: i32,
    #[id(0x2f29)] #[optional] pub num_owned_home_cores: i32,
    #[id(0x32e3)] #[optional] pub non_overseas_development: FixedPoint,
    #[id(0x2e87)] #[optional] pub num_of_controlled_cities: i32,
    #[id(0x297e)] #[optional] pub num_of_ports: i32,
    #[id(0x2e88)] #[optional] pub num_of_core_ports: i32,
    #[id(0x2b5c)] #[optional] pub num_of_total_ports: i32,
    #[id(0x2a59)] #[optional] pub num_of_cardinals: i32,
    #[id(0x3314)] #[optional] pub num_of_regulars: i32,
    #[id(0x297d)] #[optional] pub num_of_cities: i32,
    #[id(0x3390)] #[optional] pub num_of_provinces_in_states: i32,
    #[id(0x3391)] #[optional] pub num_of_provinces_in_territories: i32,
    #[id(0x3235)] #[optional] pub forts: i32,
    #[id(0x2982)] #[optional] pub num_of_allies: i32,
    #[id(0x2983)] #[optional] pub num_of_royal_marriages: i32,
    #[id(0x2e8b)] #[optional] pub num_of_heathen_provs: i32,
    #[id(0x2e8d)] #[optional] pub inland_sea_ratio: FixedPoint,
    #[id(0x3291)] #[optional] pub average_unrest: FixedPoint,
    #[id(0x33d3)] #[optional] pub average_effective_unrest: FixedPoint,
    #[id(0x30fc)] #[optional] pub average_autonomy: FixedPoint,
    #[id(0x34d1)] #[optional] pub average_autonomy_above_min: FixedPoint,
    #[id(0x30fd)] #[optional] pub average_home_autonomy: FixedPoint,
    #[id(0x381a)] #[optional] pub friend_tags: Vec<String>,
    #[id(0x37c7)] #[optional] pub num_of_buildings_indexed: (),
    #[id(0x2ebc)] #[optional] pub produced_goods_value: Vec<FixedPoint>,
    #[id(0x2e8e)] #[optional] pub num_of_goods_produced: Vec<i32>,
    #[id(0x36e9)] #[optional] pub traded: Vec<FixedPoint>,
    #[id(0x37c8)] #[optional] pub num_of_religions_indexed: (),
    #[id(0x37d4)] #[optional] pub num_of_religions_dev: (),
    #[id(0x2e90)] #[optional] pub num_of_leaders: [i32; 4],
    #[id(0x347c)] #[optional] pub num_of_leaders_with_traits: [i32; 4],
    #[id(0x2fdd)] #[optional] pub num_of_free_leaders: [i32; 4],
    #[id(0x3396)] #[optional] pub border_pct: (),
    #[id(0x3397)] #[optional] pub border_sit: (),
    #[id(0x34e8)] #[optional] pub border_provinces: Vec<i32>,
    #[id(0x2e92)] #[optional] pub neighbours: Vec<String>,
    #[id(0x2e93)] #[optional] pub home_neighbours: Vec<String>,
    #[id(0x2e94)] #[optional] pub core_neighbours: Vec<String>,
    // 381b ????
    #[id(0x2e9b)] #[optional] pub allies: Vec<String>,
    #[id(0x33d0)] #[optional] pub extended_allies: Vec<String>,
    #[id(0x2e9f)] #[optional] pub current_at_war_with: Vec<String>,
    #[id(0x2ea0)] #[optional] pub current_war_allies: Vec<String>,
    #[id(0x2f3b)] pub score_rating: [FixedPoint; 3],
    #[id(0x2f3c)] pub score_rank: [i32; 3],
    #[id(0x361e)] pub age_score: [FixedPoint; 4],
    #[id(0x38e5)] pub vc_age_score: [FixedPoint; 4],
    #[id(0x3733)] pub score_place: i32,
    #[id(0x29a1)] pub prestige: FixedPoint,
    #[id(0x2886)] pub stability: FixedPoint,
    #[id(0x2876)] pub treasury: FixedPoint,
    #[id(0x2a3a)] pub estimated_monthly_income: FixedPoint,
    #[id(0x2888)] #[optional] pub inflation: FixedPoint,
    #[id(0x2aff)] #[optional] pub inflation_history: Vec<FixedPoint>,
    #[id(0x2e42)] pub opinion_cache: Vec<i32>,
    #[id(0x2dd8)] pub under_construction: Vec<i32>,
    #[id(0x2b30)] pub under_construction_queued: Vec<i32>,
    #[id(0x2dd9)] pub total_count: Vec<i32>,
    #[id(0x2e7d)] #[optional] pub owned_provinces: Vec<i32>,
    #[id(0x2e7e)] #[optional] pub controlled_provinces: Vec<i32>,
    #[id(0x2e7f)] #[optional] pub core_provinces: Vec<i32>,
    #[id(0x2e80)] #[optional] pub claim_provinces: Vec<i32>,
    #[id(0x2ea8)] pub idea_may_cache: Vec<i32>,
    #[id(0x2e81)] pub update_opinion_cache: bool,
    #[id(0x2e82)] pub needs_refresh: bool,
    #[id(0x34e7)] pub casus_bellis_refresh: bool,
    #[id(0x2e83)] pub needs_rebel_unit_refresh: bool,
    #[id(0x2719)] #[optional] pub war_exhaustion: FixedPoint,
    #[id(0x36e6)] #[optional] pub monthly_war_exhaustion: FixedPoint,
    #[id(0x30b7)] pub can_take_wartaxes: bool,
    #[id(0x2916)] pub land_maintenance: FixedPoint,
    #[id(0x2917)] pub naval_maintenance: FixedPoint,
    #[id(0x2cfb)] pub colonial_maintenance: FixedPoint,
    #[id(0x2d0e)] pub missionary_maintenance: FixedPoint,
    #[id(0x2951)] #[optional] pub army_tradition: FixedPoint,
    #[id(0x2952)] #[optional] pub navy_tradition: FixedPoint,
    #[id(0x2e5e)] pub last_war_ended: (), // Date
    #[id(0x2e08)] pub num_uncontested_cores: i32,
    #[id(0x2875)] pub ledger: (),
    #[id(0x2788)] pub loan_size: i32,
    #[id(0x2b0e)] pub estimated_loan: FixedPoint,
    #[id(0x28ad)] #[repeated] pub loan: Vec<()>,
    #[id(0x2be7)] #[optional] pub religious_unity: FixedPoint,
    #[id(0x31c0)] #[optional] pub devotion: FixedPoint,
    #[id(0x35d4)] #[optional] pub meritocracy: FixedPoint,
    #[id(0x2bfc)] #[optional] pub piety: FixedPoint,
    #[id(0x332d)] #[optional] pub recovery_motivation: FixedPoint,
    #[id(0x2b9e)] #[optional] pub papal_influence: FixedPoint,
    #[id(0x33f1)] #[optional] pub corruption: FixedPoint,
    #[id(0x3438)] #[optional] pub root_out_corruption_slider: FixedPoint,
    #[id(0x2fbe)] #[optional] pub personal_deity: String,
    #[id(0x3497)] #[optional] pub fetishist_cult: String,
    #[id(0x349b)] #[optional] pub unlock_cult: Vec<String>,
    #[id(0x2b51)] #[optional] pub legitimacy: FixedPoint,
    #[id(0x2bfd)] pub mercantilism: FixedPoint,
    #[id(0x356d)] pub splendor: FixedPoint,
    // 36d6, 376a
    #[id(0x2e60)] pub active_idea_groups: HashMap<String, i32>,
    #[id(0x2f03)] #[optional] pub active_native_advancement: (),
    #[id(0x28d9)] #[repeated] pub advisor: Vec<()>,
    #[id(0x2866)] #[optional] pub government: (),
    #[id(0x2743)] #[optional] pub merchants: (),
    #[id(0x2744)] #[optional] pub missionaries: (),
    #[id(0x2746)] #[optional] pub diplomats: (),
    #[id(0x2968)] #[repeated] pub modifier: Vec<()>,
    #[id(0x283f)] pub manpower: FixedPoint,
    #[id(0x2973)] pub max_manpower: FixedPoint,
    #[id(0x33ab)] #[optional] pub sailors: FixedPoint,
    #[id(0x33ac)] pub max_sailors: FixedPoint,
    #[id(0x29d5)] #[optional] pub sub_unit: (),
    #[id(0x3802)] pub num_of_captured_ships_with_boarding_doctrine: i32,
    #[id(0x28a0)] #[repeated] pub army: Vec<()>,
    #[id(0x28a1)] #[repeated] pub navy: Vec<()>,
    #[id(0x2e61)] pub active_relations: (),
    #[id(0x28ba)] #[repeated] pub leader: Vec<()>,
    #[id(0x37d3)] pub decision_seed: i32,
    #[id(0x2840)] #[optional] pub monarch: (),
    #[id(0x2d41)] #[optional] pub heir: (),
    #[id(0x343f)] #[optional] pub queen: (),
    #[id(0x34a7)] #[optional] pub original_dynasty: String,
    #[id(0x3805)] pub num_of_consorts: i32,
    #[id(0x2c91)] pub inauguration: (), // Date
    #[id(0x2a2f)] #[repeated] pub previous_monarch: Vec<()>,
    #[id(0x2bc3)] pub ai: (),
    #[id(0x3340)] #[optional] pub assigned_estates: bool,
    #[id(0x2ab2)] pub powers: Vec<i32>,
    #[id(0x3380)] #[optional] pub anti_nation_ruining_end_date: (), // XXX: Date
    #[id(0x33ce)] #[optional] pub spy_propensity: FixedPoint,
    #[id(0x28fc)] pub losses: (),
    #[id(0x37c3)] #[optional] pub adm_spent_indexed: (),
    #[id(0x37c4)] #[optional] pub dip_spent_indexed: (),
    #[id(0x37c5)] #[optional] pub mil_spent_indexed: (),
    #[id(0x37e2)] pub innovativeness: FixedPoint,
    #[id(0x37e7)] #[optional] pub completed_missions: Vec<String>,
    #[id(0x37ef)] pub historic_stats_cache: (),
    #[id(0x3809)] pub country_missions: (),
    #[id(0x3820)] #[optional] pub government_reform_progress: FixedPoint,
}

#[derive(ParadoxParse, Default)]
pub struct Statistics {
    #[id(0x0134)] #[repeated] pub ledger_data: Vec<LedgerData>,
}

#[derive(ParadoxParse, Default)]
pub struct LedgerData {
    pub name: String, // XXX: CountryRef
    #[id(0x00f0)] #[optional] pub data: HashMap<String, i32>,
}
